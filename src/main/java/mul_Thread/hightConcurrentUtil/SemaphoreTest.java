package mul_Thread.hightConcurrentUtil;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.Semaphore;/** * Semaphore可以用于做流量控制，我国是公用资源有限的应用场景，比如数据库连接。 * * 有一个需求，读取几万个文件久数据，因为主都是ip型任务，可以启动几十个线程并发读取，但是讲到内存后，还需要存储到数据库中，面数据库的连接数据只有10个。 * 夜里我们必须控制只有10个线程同时获取数据连接保存数据，否则会报无法获取数据库连接。这个时候，可以使用Semapphore来做流量控制。 * *在代码中，有30线程在执行，但是只允许10个并发执行， */public class SemaphoreTest {    private static final int THREAD_COUNT = 30;    private static ExecutorService threadPool = Executors.newFixedThreadPool(THREAD_COUNT);    private static Semaphore s = new Semaphore(10);    public static void main(String[] args) {        for (int i = 0; i < THREAD_COUNT; i++) {            threadPool.execute(new Runnable() {                @Override                public void run() {                    try {                        s.acquire();                        System.out.println("save data");                        s.release();                    } catch (InterruptedException e) {                    }                }            });        }        threadPool.shutdown();    }}