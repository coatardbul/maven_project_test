package mulThread.hightConcurrentUtil;import java.util.concurrent.Exchanger;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;/** *用于线程间协作的工具类。Exchange用于进行线程间的数据交换。它提供一个同步点，在这个两步点上，两个线程可以交换彼此的数据。这两个线程通过exchange方法交换数据， * 如果第一个先执行exchange方法，它会一直等待第十个线程了也执行exchange方法。当两个线程都到达同步点时，这两个线程就可以交换数据，将本线程生养出来的数据传递线程对方。 * */public class ExchangerTest {    private static final Exchanger<String> exgr = new Exchanger<String>();    private static ExecutorService threadPool = Executors.newFixedThreadPool(2);    public static void main(String[] args) {        threadPool.execute(new Runnable() {            @Override            public void run() {                try {                    String A = "银行流水A";                    exgr.exchange(A);                } catch (InterruptedException e) {                }            }        });        threadPool.execute(new Runnable() {            @Override            public void run() {                try {                    String B = "银行流水B";                    String A = exgr.exchange("B");                    System.out.println("A银行流水" + A.equals(B) + "银行流水" + A + "银行流水" + B);                } catch (InterruptedException e) {                }            }        });        threadPool.shutdown();    }}